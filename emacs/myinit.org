* Configurations which do not require packages
** Set font : Hack (puts sunglasses and hoddie)
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Fira Code") '(height . 105))
#+END_SRC
** Remove Startup clutter
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message "")
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC
** Set whitespace mode on programming files
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'whitespace-mode)
#+END_SRC
** Highligh current line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC
** Set cursor shape
#+BEGIN_SRC emacs-lisp
(set-default 'cursor-type 'bar)
(set-default 'cursor-in-non-selected-windows 'hollow)
#+END_SRC
** Scrolling behavior
#+BEGIN_SRC emacs-lisp
;;; Scroll line per line instead of jumping half screen and recenter on point
(setq scroll-conservatively 101)
;;; When using page up/down, bring the point to the top/bottom when reaching the extremities of the document
(setq-default scroll-error-top-bottom t)
#+END_SRC
** Remap ESC to "C-g"
#+BEGIN_SRC emacs-lisp
;;; ESC is just too easy to hit to quit things. Vim does it better, but shhh, we would not want someone to hear that.
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))
#+END_SRC
** PLEASE use utf-8 for things
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC
** Replace selected text when typing something
#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC
** Change yes-or-no questions to y-or-n questions? (answer yes or no)
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Set line numbers for programming files
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC
** I'm editing code most of the time, do not wrap lines
#+BEGIN_SRC emacs-lisp
(setq-default truncate-lines 1)
#+END_SRC
** Just put backup files somewhere less distracting
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . ,(concat user-emacs-directory ".emacs_saves/"))))
#+END_SRC
** Also prevent the creation of lock files since I don't want to lock myself (esp. on windows)
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC
** Reload files changed on disk automatically
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC
** Set org-mode ellipsis to something more obvious
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ~~>")
#+END_SRC
** Remap "C-z" to undo : We are not in a terminal, and C-z is too much muscle memory at this point to learn it as "suspend emacs"
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-z") 'undo)
#+END_SRC
** Tab-width 4 master race
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
(setq-default default-tab-width 4)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
#+END_SRC
** Slowness related to unicode character should be solved by this workaround
#+BEGIN_SRC emacs-lisp
(setq inhibit-compacting-font-caches t)
#+END_SRC
** iBuffer
#+BEGIN_SRC emacs-lisp
;;; borrowed from good'ol Mike Zamansky
(global-set-key (kbd "C-x C-b") 'ibuffer)
;(setq ibuffer-saved-filter-groups
;      (quote (("DEFAULT"
;               ("dired" (mode . dired-mode))
;               ("magit" (mode . magit-mode))
;               ("programming" (or
;                               (mode . clojure-mode)
;                               (mode . clojurescript-mode)
;                               (mode . python-mode)
;                               (mode . c++-mode)))
;			  ("ORG"
;               ("org" (name . "^.*org$")))
;			  ("TEMPORARY"
;               ("emacs" (or (name . "^\\*.*\\*$"))))
;               ))))
;
;(add-hook 'ibuffer-mode-hook
;          (lambda ()
;            (ibuffer-auto-mode 1)
;            (ibuffer-switch-to-saved-filter-groups "default")))

;; don't show these
;(add-to-list 'ibuffer-never-show-predicates "zowie")

;; Don't show filter groups if there are no buffers in that group
;(setq ibuffer-show-empty-filter-groups nil)

;; Don't ask for confirmation to delete marked buffers
(setq ibuffer-expert t)
#+END_SRC
** Windows configuration
#+BEGIN_SRC emacs-lisp
(setq explicit-shell-file-name "C:/Program Files/Git/bin/bash.exe")
(setq shell-file-name explicit-shell-file-name)
(add-to-list 'exec-path "C:/Program Files (x86)/Git/bin")
;;(setq explicit-shell-file-name "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe")
;;(setq shell-file-name explicit-shell-file-name)
;;(add-to-list 'exec-path "C:\Windows\System32\WindowsPowerShell\v1.0\")
#+END_SRC
* Configurations which do require packages
** Theme and apperance
*** Themes
#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme :ensure t :defer t)
(use-package doom-themes :ensure t :defer t)
(use-package srcery-theme :ensure t :defer t)
(use-package madhat2r-theme :ensure t :defer t)
(use-package zenburn-theme :ensure t :defer t)
(use-package hc-zenburn-theme :ensure t :defer t)
(use-package moe-theme :ensure t :defer t)
(use-package ample-theme :ensure t :defer t)
(use-package zerodark-theme :ensure t :defer t)
(load-theme 'hc-zenburn t)
#+END_SRC
*** Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :config
  (powerline-default-theme)
  (setq powerline-default-separator 'arrow))
#+END_SRC
*** Org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :init
  (setq org-bullets-bullet-list '("♚" "♛" "♜" "♝" "♞" "♟" "♔" "♕" "♖" "♗" "♘" "♙" "♋" "♌" "♍" "♎" "♏" "♐" "♑" "♒" "♓"))
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** Utilities
*** Drag-stuff
#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :ensure t
  :config
  (add-to-list 'drag-stuff-except-modes 'org-mode)
  (drag-stuff-define-keys) ; <M-up>, <M-down>, <M-left>, <M-right>
  (drag-stuff-global-mode 1))
#+END_SRC
*** Ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (custom-set-faces '(aw-leading-char-face ((t (:foreground "red" :height 4.0 :width normal)))))
  :bind
  ("C-x o" . 'ace-window))
#+END_SRC
*** Which-key : Show completion on key chords
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC
*** Golden ratio : God's invisible hand, now in the realm of emacs
#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :ensure t
  :config
  (golden-ratio-mode)
  (add-to-list 'golden-ratio-extra-commands 'ace-window))
#+END_SRC
*** Ag
#+BEGIN_SRC emacs-lisp
(use-package ag
  :ensure t)
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode)
  (setq projectile-enable-caching t
	projectile-indexing-method 'alien
	projectile-completion-system 'helm)
  :bind
  ("s-p" . 'projectile-command-map)
  ("C-c p" . 'projectile-command-map))
#+END_SRC
*** Rainbow-mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t)
#+END_SRC
*** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :config
  (require 'helm-config)
  (helm-mode t)
  (helm-autoresize-mode t)
  (setq helm-M-x-fuzzy-match t
	helm-buffers-fuzzy-matching t
	helm-recentf-fuzzy-match t)
  :bind
  ("M-x" . 'helm-M-x)
  ("M-y" . 'helm-show-kill-ring)
  ("C-x b" . 'helm-mini)
  ("C-," . 'helm-mini)
  ("C-x C-m" . 'helm-M-x)
  ("C-x C-f" . 'helm-find-files)
  ("C-x C-r" . 'helm-recentf)
  ("C-x r l" . 'helm-filtered-bookmarks))
;  ("M-s /" . 'helm-multi-swoop))
#+END_SRC
*** Helm-ag
#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :ensure t
  :bind
  ("M-s" . 'helm-do-ag))
#+END_SRC
*** Helm-projectile
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :ensure t
  :config
  (helm-projectile-on))
#+END_SRC
*** Helm-swoop
#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :ensure t
  :config
  (setq helm-swoop-split-direction 'split-window-vertically
	helm-swoop-pre-input-function (lambda () ""))
  :bind
  ("C-s" . 'helm-swoop))
#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (use-package yasnippet-snippets
	:ensure t)
  (yas-reload-all)
  (add-hook 'org-mode-hook 'yas-minor-mode))
#+END_SRC
*** Ample-regexps : Summoning tainted souls in the realm of the living, now available in lisp
#+BEGIN_SRC emacs-lisp
(use-package ample-regexps
  :ensure t)
#+END_SRC
*** Charmat : UTF-8 characters
#+BEGIN_SRC emacs-lisp
(use-package charmap
  :ensure t)
#+END_SRC
*** Helpful : better help
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :ensure t
  :bind
  ("C-h f" . #'helpful-callable)
  ("C-h v" . #'helpful-variable)
  ("C-h k" . #'helpful-key)
  ("C-h F" . #'helpful-function)
  ("C-h C" . #'helpful-command))
#+END_SRC
** Language-specific modes
#+BEGIN_SRC emacs-lisp
(use-package powershell :ensure t)
(use-package csharp-mode :ensure t)
(use-package groovy-mode :ensure t)
#+END_SRC
** Hydra
#+BEGIN_SRC emacs-lisp
;;; Hydra
(use-package hydra
  :ensure t
  :config
  (defhydra hydra-window-management (global-map "<f5>")
    "Hydra for window and text features"
    ("<right>" enlarge-window-horizontally)
    ("<left>" shrink-window-horizontally)
    ("<up>" enlarge-window)
    ("<down>" shrink-window)
    ("=" balance-windows :exit t)
    ("<next>" text-scale-decrease)
    ("<prior>" text-scale-increase)))
#+END_SRC
